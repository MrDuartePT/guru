From 22cff5439ca33c0beafd6a77c160959dff7fddf7 Mon Sep 17 00:00:00 2001
From: a-kenji <aks.kenji@protonmail.com>
Date: Wed, 16 Mar 2022 21:49:41 +0100
Subject: [PATCH 1/4] fix(feat): `disable_automatic_asset_installation`

This fixes a regression in the feature system:
The asset installation didn't get turned off by the feature.

Add error logging to the install functions.

Properly show features in setup

* fix(feat): disable `mkdir` in wasm_wm

The `wasm_vm` creates the `plugin_dir` before mounting it.
Turn that behavior off on `feature-disable-asset-installation`.

Alternative:
    Is this even needed? We make sure the directory is there upon the
    normal asset installation.

fixes #1130
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -64,4 +64,4 @@ bin-dir = "{ bin }{ binary-ext }"
 pkg-fmt = "tgz"
 
 [features]
-disable_automatic_asset_installation = []
+disable_automatic_asset_installation = [ "zellij-utils/disable_automatic_asset_installation" ]
--- a/src/commands.rs
+++ b/src/commands.rs
@@ -89,7 +89,6 @@ fn create_new_client() -> ClientInfo {
 
 fn install_default_assets(opts: &CliArgs) {
     let data_dir = opts.data_dir.clone().unwrap_or_else(get_default_data_dir);
-    #[cfg(not(disable_automatic_asset_installation))]
     populate_data_dir(&data_dir);
 }
 
--- a/src/install.rs
+++ b/src/install.rs
@@ -1,7 +1,10 @@
+#[cfg(not(feature = "disable_automatic_asset_installation"))]
 use std::fs;
 use std::path::Path;
+#[cfg(not(feature = "disable_automatic_asset_installation"))]
 use zellij_utils::{consts::VERSION, shared::set_permissions};
 
+#[cfg(not(feature = "disable_automatic_asset_installation"))]
 macro_rules! asset_map {
     ($($src:literal => $dst:literal),+ $(,)?) => {
         {
@@ -14,6 +17,7 @@ macro_rules! asset_map {
     }
 }
 
+#[cfg(not(feature = "disable_automatic_asset_installation"))]
 pub(crate) fn populate_data_dir(data_dir: &Path) {
     // First run installation of default plugins & layouts
     let mut assets = asset_map! {
@@ -29,10 +33,14 @@ pub(crate) fn populate_data_dir(data_dir: &Path) {
     for (path, bytes) in assets {
         let path = data_dir.join(path);
         let parent_path = path.parent().unwrap();
-        fs::create_dir_all(parent_path).unwrap();
-        set_permissions(parent_path).unwrap();
+        fs::create_dir_all(parent_path).unwrap_or_else(|e| log::error!("{:?}", e));
+        set_permissions(parent_path).unwrap_or_else(|e| log::error!("{:?}", e));
         if out_of_date || !path.exists() {
-            fs::write(path, bytes).expect("Failed to install default assets!");
+            fs::write(path, bytes)
+                .unwrap_or_else(|e| log::error!("Failed to install default assets! {:?}", e));
         }
     }
 }
+
+#[cfg(feature = "disable_automatic_asset_installation")]
+pub(crate) fn populate_data_dir(_data_dir: &Path) {}
--- a/zellij-server/src/wasm_vm.rs
+++ b/zellij-server/src/wasm_vm.rs
@@ -92,7 +92,9 @@ pub(crate) fn wasm_thread_main(
     let mut connected_clients: Vec<ClientId> = vec![];
     let plugin_dir = data_dir.join("plugins/");
     let plugin_global_data_dir = plugin_dir.join("data");
-    fs::create_dir_all(&plugin_global_data_dir).unwrap();
+
+    #[cfg(not(feature = "disable_automatic_asset_installation"))]
+    fs::create_dir_all(&plugin_global_data_dir).unwrap_or_else(|e| log::error!("{:?}", e));
 
     loop {
         let (event, mut err_ctx) = bus.recv().expect("failed to receive event on channel");
--- a/zellij-utils/Cargo.toml
+++ b/zellij-utils/Cargo.toml
@@ -46,3 +46,5 @@ features = ["unstable"]
 [dev-dependencies]
 tempfile = "3.2.0"
 
+[features]
+disable_automatic_asset_installation = [ ]

From e4cc8bc1e6b029ba7c61b12b60fc2916bd181157 Mon Sep 17 00:00:00 2001
From: a-kenji <aks.kenji@protonmail.com>
Date: Thu, 17 Mar 2022 08:13:08 +0100
Subject: [PATCH 2/4] fixup: make assets installation more robust

--- a/src/install.rs
+++ b/src/install.rs
@@ -32,12 +32,17 @@ pub(crate) fn populate_data_dir(data_dir: &Path) {
 
     for (path, bytes) in assets {
         let path = data_dir.join(path);
-        let parent_path = path.parent().unwrap();
-        fs::create_dir_all(parent_path).unwrap_or_else(|e| log::error!("{:?}", e));
-        set_permissions(parent_path).unwrap_or_else(|e| log::error!("{:?}", e));
-        if out_of_date || !path.exists() {
-            fs::write(path, bytes)
-                .unwrap_or_else(|e| log::error!("Failed to install default assets! {:?}", e));
+        // TODO: Is the [path.parent()] really necessary here?
+        // We already have the path and the parent through `data_dir`
+        if let Some(parent_path) = path.parent() {
+            fs::create_dir_all(parent_path).unwrap_or_else(|e| log::error!("{:?}", e));
+            set_permissions(parent_path).unwrap_or_else(|e| log::error!("{:?}", e));
+            if out_of_date || !path.exists() {
+                fs::write(path, bytes)
+                    .unwrap_or_else(|e| log::error!("Failed to install default assets! {:?}", e));
+            }
+        } else {
+            log::error!("The path {:?} has no parent directory", path);
         }
     }
 }

From 3506ca50de0ab5443479011e44f750845f6bf5e1 Mon Sep 17 00:00:00 2001
From: a-kenji <aks.kenji@protonmail.com>
Date: Thu, 17 Mar 2022 08:22:09 +0100
Subject: [PATCH 3/4] fix(feat): disable `mkdir` in `wasm_vm`

disable `mkdir` in `wasm_vm` on `feature-disable-asset-installation`
--- a/zellij-server/src/wasm_vm.rs
+++ b/zellij-server/src/wasm_vm.rs
@@ -272,7 +272,14 @@ fn start_plugin(
     let input = Pipe::new();
     let stderr = LoggingPipe::new(&plugin.location.to_string(), plugin_id);
     let plugin_own_data_dir = plugin_global_data_dir.join(Url::from(&plugin.location).to_string());
-    fs::create_dir_all(&plugin_own_data_dir).unwrap();
+    #[cfg(not(feature = "disable_automatic_asset_installation"))]
+    fs::create_dir_all(&plugin_own_data_dir).unwrap_or_else(|e| {
+        log::error!(
+            "Could not create plugin_own_data_dir in {:?} \n Error: {:?}",
+            &plugin_own_data_dir,
+            e
+        )
+    });
 
     let mut wasi_env = WasiState::new("Zellij")
         .env("CLICOLOR_FORCE", "1")

From be35cf5731aa786cbac85491f260321be3953a88 Mon Sep 17 00:00:00 2001
From: a-kenji <aks.kenji@protonmail.com>
Date: Thu, 17 Mar 2022 10:25:15 +0100
Subject: [PATCH 4/4] fixup! Use `cache_directory` for plugin hashes

Use `cache_directory` rather than the `plugin_directory`
for plugin hashes.
--- /dev/null
+++ b/update-toolchain.sh
@@ -0,0 +1,11 @@
+#!/usr/bin/env bash
+set -euxo pipefail
+
+get_latest_release() {
+  curl --silent "https://api.github.com/repos/$1/releases/latest" | # Get latest release from GitHub api
+    grep '"tag_name":'
+      #|                                            # Get tag line
+    #sed -E 's/.*"([^"]+)".*/\1/'                                    # Pluck JSON value
+}
+
+get_latest_release "$1"
--- a/zellij-server/src/wasm_vm.rs
+++ b/zellij-server/src/wasm_vm.rs
@@ -29,7 +29,7 @@ use crate::{
 };
 
 use zellij_utils::{
-    consts::{VERSION, ZELLIJ_PROJ_DIR, ZELLIJ_TMP_DIR},
+    consts::{VERSION, ZELLIJ_PROJ_DIR, ZELLIJ_TMP_DIR, ZELLIJ_CACHE_DIR},
     errors::{ContextType, PluginContext},
 };
 use zellij_utils::{
@@ -271,8 +271,7 @@ fn start_plugin(
     let output = Pipe::new();
     let input = Pipe::new();
     let stderr = LoggingPipe::new(&plugin.location.to_string(), plugin_id);
-    let plugin_own_data_dir = plugin_global_data_dir.join(Url::from(&plugin.location).to_string());
-    #[cfg(not(feature = "disable_automatic_asset_installation"))]
+    let plugin_own_data_dir = ZELLIJ_CACHE_DIR.join(Url::from(&plugin.location).to_string());
     fs::create_dir_all(&plugin_own_data_dir).unwrap_or_else(|e| {
         log::error!(
             "Could not create plugin_own_data_dir in {:?} \n Error: {:?}",
--- a/zellij-utils/src/consts.rs
+++ b/zellij-utils/src/consts.rs
@@ -53,6 +53,7 @@ lazy_static! {
     pub static ref ZELLIJ_TMP_DIR: PathBuf = PathBuf::from(format!("/tmp/zellij-{}", *UID));
     pub static ref ZELLIJ_TMP_LOG_DIR: PathBuf = ZELLIJ_TMP_DIR.join("zellij-log");
     pub static ref ZELLIJ_TMP_LOG_FILE: PathBuf = ZELLIJ_TMP_LOG_DIR.join("zellij.log");
+    pub static ref ZELLIJ_CACHE_DIR: PathBuf = ZELLIJ_PROJ_DIR.cache_dir().to_path_buf();
 }
 
 pub const FEATURES: &[&str] = &[
